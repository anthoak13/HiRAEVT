#ifndef __RBHINPUnpakcer_H
#define __RBHINPUnpakcer_H

#ifndef __RBMODULEUNPACKER_H
#include "RBModuleUnpacker.h"
#endif

#include "RBElectronics.h"

#include "TClonesArray.h"
#include "TTree.h"



class RBHINPHit : public TObject
{
private:
  UShort_t fBank;     // XLM BANK (A=0, B=1)
  UShort_t fChannel;  // chip channel
  UShort_t fChip;     // chip number
  UShort_t fEnergy;   // raw energy
  UShort_t fTime;     // raw time
  
public:
  RBHINPHit(){Clear();}
  virtual ~RBHINPHit() {Clear();}
  
  void Clear(){fBank    = 99;
    fChannel = 99;
    fChip    = 99;
    fEnergy  = 0;
    fTime    = 0;}
  
  void Set(UShort_t bank, UShort_t ch, UShort_t chip, UShort_t energy, UShort_t time){
    fBank = bank; fChannel = ch; fChip = chip; fEnergy = energy; fTime = time;
  };
  
  UShort_t GetBank()   {return fBank;   }
  UShort_t GetChannel(){return fChannel;}
  UShort_t GetChip()   {return fChip;   }
  UShort_t GetEnergy() {return fEnergy; }
  UShort_t GetTime()   {return fTime;   }
  
  ClassDef(RBHINPHit,1);
  
};


class RBHINPUnpacker :  public RBModuleUnpacker, public RBElectronics
{
private:
  Int_t     fnMBs;                              //! Number of MBs to be read.
  Bool_t    fUsingSISFADC;                      //! Using SIS FADC for digitization?
  Bool_t    fFoundBeginMarker;                  //! Found "begin" marker flag.
  Int_t     fReportNExtraMarkers;               //!

  Int_t wordCountZeroCount = 0;
  Int_t eventsAnalyzed = 0;


  Int_t     fBankMB[4];                         //! MB # to XLM BANK
  
  TString   fChName;                            //! Channel label
  Int_t     fnCh;                               //!
  ULong64_t fTimestamp[2];                      //
  UShort_t  fGroupMask;                         //
  UShort_t  fData[32];                          //! XLM data
  Int_t     fNHits;                             //
  TClonesArray        *fHits;                   //  Collection of triggered HINP channels.
  static TClonesArray *fgHits;                  //  Collection of triggered HINP channels.
  
  TTree    *fChain;                             //! Pointer to current TTree or TChain
  Int_t     fCurrent;                           //! Current Tree number in a TChain
  
public:
  RBHINPUnpacker(const char* name, Int_t nMBs, Bool_t usingFADC);
  ~RBHINPUnpacker();
  
  // The unpacker entry:
  
public:
  RBHINPHit *AddHit(UShort_t bank,   UShort_t ch, UShort_t chip,
                    UShort_t energy, UShort_t time); // Add a hit to the clones array.
  
  Int_t      Unpack(std::vector<UShort_t>& event, UInt_t offset);
  
  void Clear(Option_t *option="");
  void InitClass(){}
  void InitBranch(TTree*);
  void InitTree(TTree*);
  
  Int_t         GetBankMB(Int_t xlmNum, char  bank);        // Get the BANK MB Id.
  Int_t         GetBankMBByIndex(Int_t bank); // Get the BANK MB Id.
  TClonesArray *GetHits(){return fHits;}      // Get the "hits" array.
  
  void  SetBankMB(Int_t xlmNum, char bank, Int_t mb);   // Set the BANK MB Id.

  ClassDef(RBHINPUnpacker,1);
};



#endif
